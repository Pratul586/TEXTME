{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Project\\\\chat-app\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// import { FormControl } from \"@chakra-ui/form-control\";\n// import { Input } from \"@chakra-ui/input\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import \"./styles.css\";\n// import { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\n// import { getSender, getSenderFull } from \"../config/ChatLogics\";\n// import { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { ArrowBackIcon } from \"@chakra-ui/icons\";\n// import ProfileModal from \"./Authentication/miscellaneous/ProfileModal\";\n// import ScrollableChat from \"./ScrollableChat\";\n// import Lottie from \"react-lottie\";\n// import animationData from \"../animations/typing.json\";\n\n// import io from \"socket.io-client\";\n// import UpdateGroupChatModal from \"./Authentication/miscellaneous/UpdateGroupChatModal\";\n// import { ChatState } from \"../Context/ChatProvider\";\n// const ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n// var socket, selectedChatCompare;\n\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages(prevMessages => [...prevMessages, newMessageRecieved]);\n      }\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [selectedChat, fetchAgain, notification, setNotification]);\n  useEffect(() => {\n    if (selectedChat) {\n      fetchMessages();\n      selectedChatCompare = selectedChat;\n    }\n  }, [selectedChat]);\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages(prevMessages => [...prevMessages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occurred!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions,\n              width: 70,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this) : null, /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message...\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Inter\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"+sfWAiH4HzaqTI+jt/U5OUzRS4Q=\", true);\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["SingleChat","fetchAgain","setFetchAgain","_s","messages","setMessages","useState","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","useToast","selectedChat","setSelectedChat","user","notification","setNotification","ChatState","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","useEffect","socket","io","ENDPOINT","emit","on","newMessageRecieved","selectedChatCompare","_id","chat","includes","prevMessages","disconnect","fetchMessages","config","headers","Authorization","token","data","axios","get","error","title","description","status","duration","isClosable","position","sendMessage","event","key","post","content","chatId","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","_jsxDEV","_Fragment","children","Text","fontSize","base","md","pb","px","w","display","justifyContent","alignItems","IconButton","icon","ArrowBackIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","getSender","users","ProfileModal","getSenderFull","chatName","toUpperCase","UpdateGroupChatModal","Box","flexDir","p","bg","h","borderRadius","overflowY","Spinner","size","alignSelf","margin","className","ScrollableChat","FormControl","onKeyDown","id","isRequired","mt","Lottie","options","width","style","marginBottom","marginLeft","Input","variant","placeholder","onChange","fontFamily","_c","$RefreshReg$"],"sources":["E:/React Project/chat-app/frontend/src/components/SingleChat.js"],"sourcesContent":["// import { FormControl } from \"@chakra-ui/form-control\";\r\n// import { Input } from \"@chakra-ui/input\";\r\n// import { Box, Text } from \"@chakra-ui/layout\";\r\n// import \"./styles.css\";\r\n// import { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\n// import { getSender, getSenderFull } from \"../config/ChatLogics\";\r\n// import { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { ArrowBackIcon } from \"@chakra-ui/icons\";\r\n// import ProfileModal from \"./Authentication/miscellaneous/ProfileModal\";\r\n// import ScrollableChat from \"./ScrollableChat\";\r\n// import Lottie from \"react-lottie\";\r\n// import animationData from \"../animations/typing.json\";\r\n\r\n// import io from \"socket.io-client\";\r\n// import UpdateGroupChatModal from \"./Authentication/miscellaneous/UpdateGroupChatModal\";\r\n// import { ChatState } from \"../Context/ChatProvider\";\r\n// const ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\n// var socket, selectedChatCompare;\r\n\r\n \r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || \r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages((prevMessages) => [...prevMessages, newMessageRecieved]);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [selectedChat, fetchAgain, notification, setNotification]);\r\n\r\n  useEffect(() => {\r\n    if (selectedChat) {\r\n      fetchMessages();\r\n      selectedChatCompare = selectedChat;\r\n    }\r\n  }, [selectedChat]);\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(`/api/message/${selectedChat._id}`, config);\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner size=\"xl\" w={20} h={20} alignSelf=\"center\" margin=\"auto\" />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            <FormControl onKeyDown={sendMessage} id=\"first-name\" isRequired mt={3}>\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message...\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Inter\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n\r\n\r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}