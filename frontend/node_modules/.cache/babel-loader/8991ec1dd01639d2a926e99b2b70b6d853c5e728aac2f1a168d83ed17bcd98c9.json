{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\nconst sdkCode = 'M'; // Constant per SDK\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  const pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../package.json'), 'utf-8');\n\n  // allow to pass a custom SDKVersion\n  const sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  const techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n  const product = 'A';\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode,\n    product\n  };\n}\nmodule.exports = getSDKVersions;","map":{"version":3,"names":["fs","require","path","sdkCode","getSDKVersions","useSDKVersion","useNodeVersion","pkgJSONFile","readFileSync","join","__dirname","sdkSemver","JSON","parse","version","techVersion","process","versions","node","product","module","exports"],"sources":["E:/React Project/chat-app/frontend/node_modules/cloudinary/lib/utils/analytics/getSDKVersions.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst sdkCode = 'M'; // Constant per SDK\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  const pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../package.json'), 'utf-8');\n\n  // allow to pass a custom SDKVersion\n  const sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  const techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n\n  const product = 'A';\n\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode,\n    product\n  };\n}\n\nmodule.exports = getSDKVersions;\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,OAAO,GAAG,GAAG,CAAC,CAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,aAAa,GAAG,SAAS,EAAEC,cAAc,GAAG,SAAS,EAAE;EAC7E,MAAMC,WAAW,GAAGP,EAAE,CAACQ,YAAY,CAACN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,uBAAuB,CAAC,EAAE,OAAO,CAAC;;EAE3F;EACA,MAAMC,SAAS,GAAGN,aAAa,KAAK,SAAS,GAAGO,IAAI,CAACC,KAAK,CAACN,WAAW,CAAC,CAACO,OAAO,GAAGT,aAAa;;EAE/F;EACA,MAAMU,WAAW,GAAGT,cAAc,KAAK,SAAS,GAAGU,OAAO,CAACC,QAAQ,CAACC,IAAI,GAAGZ,cAAc;EAEzF,MAAMa,OAAO,GAAG,GAAG;EAEnB,OAAO;IACLR,SAAS;IACTI,WAAW;IACXZ,OAAO;IACPgB;EACF,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAGjB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}