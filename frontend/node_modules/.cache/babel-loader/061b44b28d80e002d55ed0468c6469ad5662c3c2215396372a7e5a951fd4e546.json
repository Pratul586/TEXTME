{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Project\\\\chat-app\\\\frontend\\\\src\\\\components\\\\Authentication\\\\miscellaneous\\\\SideDrawer.js\",\n  _s = $RefreshSig$();\nimport { Box, Tooltip, Button, Text, Menu, MenuButton, Avatar } from '@chakra-ui/react';\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport React, { useState } from 'react';\nimport ChatState from \"../../../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SideDrawer = () => {\n  _s();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n  const {\n    user\n  } = ChatState();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      bg: \"white\",\n      w: \"100%\",\n      p: \"5px 10px 5px 10px\",\n      borderWidth: \"5px\",\n      children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n        label: \"Search Users to chat\",\n        hasArrow: true,\n        placement: \"bottom-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"ghost\",\n          onClick: onOpen,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            d: {\n              base: \"none\",\n              md: \"flex\"\n            },\n            px: 4,\n            children: \"Search User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"2xl\",\n        fontFamily: \"Work sans\",\n        children: \"Talk-A-Tive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n            p: 1,\n            children: [/*#__PURE__*/_jsxDEV(NotificationBadge, {\n              count: notification.length,\n              effect: Effect.SCALE\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(BellIcon, {\n              fontSize: \"2xl\",\n              m: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n            pl: 2,\n            children: [!notification.length && \"No New Messages\", notification.map(notif => /*#__PURE__*/_jsxDEV(MenuItem, {\n              onClick: () => {\n                setSelectedChat(notif.chat);\n                setNotification(notification.filter(n => n !== notif));\n              },\n              children: notif.chat.isGroupChat ? `New Message in ${notif.chat.chatName}` : `New Message from ${getSender(user, notif.chat.users)}`\n            }, notif._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Menu, {\n          children: [/*#__PURE__*/_jsxDEV(MenuButton, {\n            as: Button,\n            bg: \"white\",\n            rightIcon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 59\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              size: \"sm\",\n              cursor: \"pointer\",\n              name: user.name,\n              src: user.pic\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuList, {\n            children: [/*#__PURE__*/_jsxDEV(ProfileModal, {\n              user: user,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                children: \"My Profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuDivider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              onClick: logoutHandler,\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n_s(SideDrawer, \"Gc5eUa0KqtW9ywRIk1PpIzwwevE=\");\n_c = SideDrawer;\nexport default SideDrawer;\n\n// import { Button } from \"@chakra-ui/button\";\n// import { useDisclosure } from \"@chakra-ui/hooks\";\n// import { Input } from \"@chakra-ui/input\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import {\n//   Menu,\n//   MenuButton,\n//   MenuDivider,\n//   MenuItem,\n//   MenuList,\n// } from \"@chakra-ui/menu\";\n// import {\n//   Drawer,\n//   DrawerBody,\n//   DrawerContent,\n//   DrawerHeader,\n//   DrawerOverlay,\n// } from \"@chakra-ui/modal\";\n// import { Tooltip } from \"@chakra-ui/tooltip\";\n// import { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\n// import { Avatar } from \"@chakra-ui/avatar\";\n// import { useHistory } from \"react-router-dom\";\n// import { useState } from \"react\";\n// import axios from \"axios\";\n// import { useToast } from \"@chakra-ui/toast\";\n// import ChatLoading from \"../ChatLoading\";\n// import { Spinner } from \"@chakra-ui/spinner\";\n// import ProfileModal from \"./ProfileModal\";\n// import NotificationBadge from \"react-notification-badge\";\n// import { Effect } from \"react-notification-badge\";\n// import { getSender } from \"../../config/ChatLogics\";\n// import UserListItem from \"../userAvatar/UserListItem\";\n// import { ChatState } from \"../../Context/ChatProvider\";\n\n// function SideDrawer() {\n//   const [search, setSearch] = useState(\"\");\n//   const [searchResult, setSearchResult] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [loadingChat, setLoadingChat] = useState(false);\n\n//   const {\n//     setSelectedChat,\n//     user,\n//     notification,\n//     setNotification,\n//     chats,\n//     setChats,\n//   } = ChatState();\n\n//   const toast = useToast();\n//   const { isOpen, onOpen, onClose } = useDisclosure();\n//   const history = useHistory();\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem(\"userInfo\");\n//     history.push(\"/\");\n//   };\n\n//   const handleSearch = async () => {\n//     if (!search) {\n//       toast({\n//         title: \"Please Enter something in search\",\n//         status: \"warning\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"top-left\",\n//       });\n//       return;\n//     }\n\n//     try {\n//       setLoading(true);\n\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n\n//       const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n//       setLoading(false);\n//       setSearchResult(data);\n//     } catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: \"Failed to Load the Search Results\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom-left\",\n//       });\n//     }\n//   };\n\n//   const accessChat = async (userId) => {\n//     console.log(userId);\n\n//     try {\n//       setLoadingChat(true);\n//       const config = {\n//         headers: {\n//           \"Content-type\": \"application/json\",\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n//       const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n//       if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n//       setSelectedChat(data);\n//       setLoadingChat(false);\n//       onClose();\n//     } catch (error) {\n//       toast({\n//         title: \"Error fetching the chat\",\n//         description: error.message,\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom-left\",\n//       });\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Box\n//         d=\"flex\"\n//         justifyContent=\"space-between\"\n//         alignItems=\"center\"\n//         bg=\"white\"\n//         w=\"100%\"\n//         p=\"5px 10px 5px 10px\"\n//         borderWidth=\"5px\"\n//       >\n//         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n//           <Button variant=\"ghost\" onClick={onOpen}>\n//             <i className=\"fas fa-search\"></i>\n//             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n//               Search User\n//             </Text>\n//           </Button>\n//         </Tooltip>\n//         <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n//           Talk-A-Tive\n//         </Text>\n//         <div>\n//           <Menu>\n//             <MenuButton p={1}>\n//               <NotificationBadge\n//                 count={notification.length}\n//                 effect={Effect.SCALE}\n//               />\n//               <BellIcon fontSize=\"2xl\" m={1} />\n//             </MenuButton>\n//             <MenuList pl={2}>\n//               {!notification.length && \"No New Messages\"}\n//               {notification.map((notif) => (\n//                 <MenuItem\n//                   key={notif._id}\n//                   onClick={() => {\n//                     setSelectedChat(notif.chat);\n//                     setNotification(notification.filter((n) => n !== notif));\n//                   }}\n//                 >\n//                   {notif.chat.isGroupChat\n//                     ? `New Message in ${notif.chat.chatName}`\n//                     : `New Message from ${getSender(user, notif.chat.users)}`}\n//                 </MenuItem>\n//               ))}\n//             </MenuList>\n//           </Menu>\n//           <Menu>\n//             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n//               <Avatar\n//                 size=\"sm\"\n//                 cursor=\"pointer\"\n//                 name={user.name}\n//                 src={user.pic}\n//               />\n//             </MenuButton>\n//             <MenuList>\n//               <ProfileModal user={user}>\n//                 <MenuItem>My Profile</MenuItem>{\" \"}\n//               </ProfileModal>\n//               <MenuDivider />\n//               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n//             </MenuList>\n//           </Menu>\n//         </div>\n//       </Box>\n\n//       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n//         <DrawerOverlay />\n//         <DrawerContent>\n//           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n//           <DrawerBody>\n//             <Box d=\"flex\" pb={2}>\n//               <Input\n//                 placeholder=\"Search by name or email\"\n//                 mr={2}\n//                 value={search}\n//                 onChange={(e) => setSearch(e.target.value)}\n//               />\n//               <Button onClick={handleSearch}>Go</Button>\n//             </Box>\n//             {loading ? (\n//               <ChatLoading />\n//             ) : (\n//               searchResult?.map((user) => (\n//                 <UserListItem\n//                   key={user._id}\n//                   user={user}\n//                   handleFunction={() => accessChat(user._id)}\n//                 />\n//               ))\n//             )}\n//             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n//           </DrawerBody>\n//         </DrawerContent>\n//       </Drawer>\n//     </>\n//   );\n// }\n\n// export default SideDrawer;\nvar _c;\n$RefreshReg$(_c, \"SideDrawer\");","map":{"version":3,"names":["Box","Tooltip","Button","Text","Menu","MenuButton","Avatar","BellIcon","ChevronDownIcon","React","useState","ChatState","jsxDEV","_jsxDEV","Fragment","_Fragment","SideDrawer","_s","search","setSearch","searchResult","setSearchResult","loading","setLoading","loadingChat","setLoadingChat","user","children","d","justifyContent","alignItems","bg","w","p","borderWidth","label","hasArrow","placement","variant","onClick","onOpen","className","fileName","_jsxFileName","lineNumber","columnNumber","base","md","px","fontSize","fontFamily","NotificationBadge","count","notification","length","effect","Effect","SCALE","m","MenuList","pl","map","notif","MenuItem","setSelectedChat","chat","setNotification","filter","n","isGroupChat","chatName","getSender","users","_id","as","rightIcon","size","cursor","name","src","pic","ProfileModal","MenuDivider","logoutHandler","_c","$RefreshReg$"],"sources":["E:/React Project/chat-app/frontend/src/components/Authentication/miscellaneous/SideDrawer.js"],"sourcesContent":["import { Box, Tooltip , Button,Text, Menu, MenuButton, Avatar} from '@chakra-ui/react';\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport React, { useState } from 'react'\r\nimport ChatState from \"../../../Context/ChatProvider\"\r\n\r\nconst SideDrawer = () => {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n    const {user} = ChatState();\r\n    \r\n  return (\r\n    <>\r\n          <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n     </>\r\n  )\r\n}\r\n\r\nexport default SideDrawer;\r\n\r\n\r\n// import { Button } from \"@chakra-ui/button\";\r\n// import { useDisclosure } from \"@chakra-ui/hooks\";\r\n// import { Input } from \"@chakra-ui/input\";\r\n// import { Box, Text } from \"@chakra-ui/layout\";\r\n// import {\r\n//   Menu,\r\n//   MenuButton,\r\n//   MenuDivider,\r\n//   MenuItem,\r\n//   MenuList,\r\n// } from \"@chakra-ui/menu\";\r\n// import {\r\n//   Drawer,\r\n//   DrawerBody,\r\n//   DrawerContent,\r\n//   DrawerHeader,\r\n//   DrawerOverlay,\r\n// } from \"@chakra-ui/modal\";\r\n// import { Tooltip } from \"@chakra-ui/tooltip\";\r\n// import { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\n// import { Avatar } from \"@chakra-ui/avatar\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useToast } from \"@chakra-ui/toast\";\r\n// import ChatLoading from \"../ChatLoading\";\r\n// import { Spinner } from \"@chakra-ui/spinner\";\r\n// import ProfileModal from \"./ProfileModal\";\r\n// import NotificationBadge from \"react-notification-badge\";\r\n// import { Effect } from \"react-notification-badge\";\r\n// import { getSender } from \"../../config/ChatLogics\";\r\n// import UserListItem from \"../userAvatar/UserListItem\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\n// function SideDrawer() {\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [searchResult, setSearchResult] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n//   const {\r\n//     setSelectedChat,\r\n//     user,\r\n//     notification,\r\n//     setNotification,\r\n//     chats,\r\n//     setChats,\r\n//   } = ChatState();\r\n\r\n//   const toast = useToast();\r\n//   const { isOpen, onOpen, onClose } = useDisclosure();\r\n//   const history = useHistory();\r\n\r\n//   const logoutHandler = () => {\r\n//     localStorage.removeItem(\"userInfo\");\r\n//     history.push(\"/\");\r\n//   };\r\n\r\n//   const handleSearch = async () => {\r\n//     if (!search) {\r\n//       toast({\r\n//         title: \"Please Enter something in search\",\r\n//         status: \"warning\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"top-left\",\r\n//       });\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       setLoading(true);\r\n\r\n//       const config = {\r\n//         headers: {\r\n//           Authorization: `Bearer ${user.token}`,\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n//       setLoading(false);\r\n//       setSearchResult(data);\r\n//     } catch (error) {\r\n//       toast({\r\n//         title: \"Error Occured!\",\r\n//         description: \"Failed to Load the Search Results\",\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom-left\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const accessChat = async (userId) => {\r\n//     console.log(userId);\r\n\r\n//     try {\r\n//       setLoadingChat(true);\r\n//       const config = {\r\n//         headers: {\r\n//           \"Content-type\": \"application/json\",\r\n//           Authorization: `Bearer ${user.token}`,\r\n//         },\r\n//       };\r\n//       const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n//       if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n//       setSelectedChat(data);\r\n//       setLoadingChat(false);\r\n//       onClose();\r\n//     } catch (error) {\r\n//       toast({\r\n//         title: \"Error fetching the chat\",\r\n//         description: error.message,\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom-left\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Box\r\n//         d=\"flex\"\r\n//         justifyContent=\"space-between\"\r\n//         alignItems=\"center\"\r\n//         bg=\"white\"\r\n//         w=\"100%\"\r\n//         p=\"5px 10px 5px 10px\"\r\n//         borderWidth=\"5px\"\r\n//       >\r\n//         <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n//           <Button variant=\"ghost\" onClick={onOpen}>\r\n//             <i className=\"fas fa-search\"></i>\r\n//             <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n//               Search User\r\n//             </Text>\r\n//           </Button>\r\n//         </Tooltip>\r\n//         <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n//           Talk-A-Tive\r\n//         </Text>\r\n//         <div>\r\n//           <Menu>\r\n//             <MenuButton p={1}>\r\n//               <NotificationBadge\r\n//                 count={notification.length}\r\n//                 effect={Effect.SCALE}\r\n//               />\r\n//               <BellIcon fontSize=\"2xl\" m={1} />\r\n//             </MenuButton>\r\n//             <MenuList pl={2}>\r\n//               {!notification.length && \"No New Messages\"}\r\n//               {notification.map((notif) => (\r\n//                 <MenuItem\r\n//                   key={notif._id}\r\n//                   onClick={() => {\r\n//                     setSelectedChat(notif.chat);\r\n//                     setNotification(notification.filter((n) => n !== notif));\r\n//                   }}\r\n//                 >\r\n//                   {notif.chat.isGroupChat\r\n//                     ? `New Message in ${notif.chat.chatName}`\r\n//                     : `New Message from ${getSender(user, notif.chat.users)}`}\r\n//                 </MenuItem>\r\n//               ))}\r\n//             </MenuList>\r\n//           </Menu>\r\n//           <Menu>\r\n//             <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n//               <Avatar\r\n//                 size=\"sm\"\r\n//                 cursor=\"pointer\"\r\n//                 name={user.name}\r\n//                 src={user.pic}\r\n//               />\r\n//             </MenuButton>\r\n//             <MenuList>\r\n//               <ProfileModal user={user}>\r\n//                 <MenuItem>My Profile</MenuItem>{\" \"}\r\n//               </ProfileModal>\r\n//               <MenuDivider />\r\n//               <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n//             </MenuList>\r\n//           </Menu>\r\n//         </div>\r\n//       </Box>\r\n\r\n//       <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n//         <DrawerOverlay />\r\n//         <DrawerContent>\r\n//           <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n//           <DrawerBody>\r\n//             <Box d=\"flex\" pb={2}>\r\n//               <Input\r\n//                 placeholder=\"Search by name or email\"\r\n//                 mr={2}\r\n//                 value={search}\r\n//                 onChange={(e) => setSearch(e.target.value)}\r\n//               />\r\n//               <Button onClick={handleSearch}>Go</Button>\r\n//             </Box>\r\n//             {loading ? (\r\n//               <ChatLoading />\r\n//             ) : (\r\n//               searchResult?.map((user) => (\r\n//                 <UserListItem\r\n//                   key={user._id}\r\n//                   user={user}\r\n//                   handleFunction={() => accessChat(user._id)}\r\n//                 />\r\n//               ))\r\n//             )}\r\n//             {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n//           </DrawerBody>\r\n//         </DrawerContent>\r\n//       </Drawer>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default SideDrawer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}